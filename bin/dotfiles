#!/bin/bash


set -e


# color codes
#RESTORE='\033[0m'
NC='\033[0m'
#BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
#BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA='\033[38;5;49m'
LIGHTGRAY='\033[00;37m'
#LBLACK='\033[01;30m'
LRED='\033[01;31m'
#LGREEN='\033[01;32m'
#LYELLOW='\033[01;33m'
#LBLUE='\033[01;34m'
#LPURPLE='\033[01;35m'
#LCYAN='\033[01;36m'
#WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
#PIN="${RED}\xF0\x9F\x93\x8C${NC}"
#CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
#BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
#HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
#RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

# Paths
HOME_DIR="$HOME"
DEBUG=0
if [ "$1" == "--dry-run" ]; then
    HOME_DIR="${HOME_DIR}/dev_env"
    shift
fi
if [ "$1" == "--debug" ]; then
    #set -x
    DEBUG=1
    shift
fi
if [ "$1" == "--help" ]; then
    echo "Usage: $0 [--dry-run] [--debug] [--help]"
    exit 0
fi

CONFIG_DIR="$HOME_DIR/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/dev/.dotfiles_wip"
SSH_DIR="$HOME_DIR/.ssh"
IS_FIRST_RUN="$HOME_DIR/.dotfiles_run"
DOTFILES_LOG="$HOME_DIR/.dotfiles.log"

# _header colorize the given argument with spacing
function _task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE} [${CHECK_MARK}]  ${GREEN}%s\n" "${TASK}"
    fi
    # set new task title and print
    TASK=$1
    printf "${NC} [ ]  ${LIGHTGRAY}%s \n${NC}" "${TASK}"
}

# _cmd performs commands with error checking
function _cmd {
    # Create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch "$DOTFILES_LOG"
    fi
    # Empty log
    : > "$DOTFILES_LOG"
    if [ $DEBUG -eq 1 ]; then
        echo "Running: $1"
        if eval "$1" 2> "$DOTFILES_LOG"; then
            return 0 # Success
        fi
    else
        # Hide stdout, on error we print and exit
        if eval "$1" 1> /dev/null 2> "$DOTFILES_LOG"; then
            return 0 # Success
        fi
    fi
    # Read error from log and add spacing
    printf "${OVERWRITE} [${X_MARK}]  ${LRED}%s\n" "${TASK}"
    while read -r line; do
        printf "      %s\n" "${line}"
    done < "$DOTFILES_LOG"
    printf "\n"
    # Remove log file
    rm "$DOTFILES_LOG"
    # Exit installation
    exit 1
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${NC} [${CHECK_MARK}]  ${GREEN}%s\n" "${TASK}"
    _clear_task
}


function ubuntu_setup() {
  _task "Updating apt repository cache"
  _cmd "sudo apt-get update"
  if ! dpkg -s ansible >/dev/null 2>&1; then
    _task "Installing Ansible"
    _cmd "sudo apt-get install -y software-properties-common"
    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get install -y ansible"
    _cmd "sudo apt-get install -y python3-argcomplete"
    _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! dpkg -s python3 >/dev/null 2>&1; then
    _task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi
  if ! dpkg -s python3-pip >/dev/null 2>&1; then
    _task "Installing Python3 Pip"
    _cmd "sudo apt-get install -y python3-pip"
  fi
  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    _task "Installing Python3 Watchdog"
    _cmd "pip3 install watchdog"
  fi
}


update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  _task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    _task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

source /etc/os-release
_task "Loading Setup for detected OS: $ID"
case $ID in
  ubuntu)
    ubuntu_setup
    ;;
  debian)
    ubuntu_setup
    ;;
  *)
    printf " ${WARNING} ${YELLOW}Unsupported OS: %s!\n" "${ID}"
    exit 1
    ;;
esac


# Generate SSH keys
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  _task "Generating SSH keys"
  _cmd "mkdir -p $SSH_DIR"
  _cmd "chmod 700 $SSH_DIR"
  _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
  _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

# Clone repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    _cmd "git clone --quiet https://github.com/elidholm/dotfiles_ansible.git $DOTFILES_DIR"
else
    _task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" > /dev/null 2>&1
update_ansible_galaxy $ID

_task "Running playbook"; _task_done
if [[ -f $VAULT_SECRET ]]; then
    echo -e "${PURPLE}Running playbook with vault"
    ansible-playbook --vault-password-file "$VAULT_SECRET" "$DOTFILES_DIR/main.yml" "$@"
else
    echo -e "${PURPLE}Running playbook without vault"
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

popd > /dev/null 2>&1

if ! [[ -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi

# vi:ft=sh:
